---
/**
 * This file demonstrates how components are organized and applied in the portfolio
 * Each section is a separate component for better maintainability
 */

// Import all section components
import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import { SITE_TITLE, SITE_DESCRIPTION } from "../consts";
import HelloSection from '../components/sections/HelloSection.astro';
import AboutSection from '../components/sections/AboutSection.astro';
import ExperienceSection from '../components/sections/ExperienceSection.astro';
import ProjectsSection from '../components/sections/ProjectsSection.astro';

// Data fetching and processing for projects
// This gets all markdown files from the projects directory
const posts = import.meta.glob<MarkdownInstance<Frontmatter>>("/src/pages/projects/*.md", { eager: true });

// Transform and sort posts by date, showing only the latest 4
const sortedPosts = Object.values(posts)
  .sort((a, b) => new Date(b.frontmatter.date).getTime() - new Date(a.frontmatter.date).getTime())
  .slice(0, 4);

interface Frontmatter {
  title: string;
  description: string;
  date: string;
  image?: string;
  tags?: string[];
  url?: string;
}

---

<!doctype html>
<html lang="en" class="scroll-smooth">
  <head>
    <BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
    <!-- Meta tags for SEO and viewport -->
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
  </head>
  <body>
    <Header />
    <!-- Main container with responsive padding -->
    <div>
      <main id="content">
        <section id="hello">
          <HelloSection />
        </section>
        <section id="about">
          <AboutSection />
        </section>
        <section id="experience">
          <ExperienceSection />
        </section>
        <section id="projects">
          <ProjectsSection posts={sortedPosts} />
        </section>
      </main>
    </div>
    <Footer />

    <style>
      section {
        scroll-margin-top: 6rem;
        transition: all 0.3s ease;
        position: relative;
      }

      main:hover section {
        filter: blur(5px);
        opacity: 1;
      }

      main:hover section:hover {
        filter: blur(0);
        opacity: 1;
      }
    </style>

    <script>
      // Intersection Observer for section highlighting
      const sections = document.querySelectorAll('section[id]');
      const navLinks = document.querySelectorAll('nav a');

      const observerOptions = {
        rootMargin: '-20% 0px -35% 0px'
      };

      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const currentId = entry.target.getAttribute('id');
            updateActiveLink(currentId);
          }
        });
      }, observerOptions);

      sections.forEach((section) => {
        observer.observe(section);
      });

      function updateActiveLink(sectionId) {
        navLinks.forEach(link => {
          const href = link.getAttribute('href')?.substring(1);
          if (href === sectionId) {
            link.classList.add('active');
          } else {
            link.classList.remove('active');
          }
        });
      }
    </script>
  </body>
</html>

<!-- 
  How the components are structured:

  HelloSection (src/components/sections/HelloSection.astro)
  - Renders the header and navigation
  - No props required
  - Sticky positioning on desktop

  AboutSection (src/components/sections/AboutSection.astro)
  - Renders the about content
  - No props required
  - Static content

  ExperienceSection (src/components/sections/ExperienceSection.astro)
  - Renders work experience
  - Contains internal data structure for jobs
  - Maps through jobs to create list

  ProjectsSection (src/components/sections/ProjectsSection.astro)
  - Renders project cards
  - Requires posts prop
  - Handles both featured and archive views
  
  Each component:
  1. Has its own styling
  2. Is independently maintainable
  3. Can be reused in other pages
  4. Follows the same design system
-->
